{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0  TCSS 422 Final Project\
 Team 4\
 Tempest Parr, Paul Zander, Geoffrey Tanay, Justin Clark\
\
 Data Summary:\
From runs with no deadlock simulation we notice we have most of the processes in the ready queue. There is anywhere from 70 to over 90. The number of processes in wait queues ranges from 0 to 10. \
In the runs with deadlock simulation we see deadlocks occurring a little less than half of the time. \
\
Producer/consumer processes are able to write to/read from their global variable two to three times throughout the simulation.\
\
\
\
 Starvation Algorithm Summary:\
 For the starvation algorithm we iterate through priorities 1, 2, and 3 in the ready queue. Since priority 0 cannot be boosted to the next higher priority we do not look at that fifo queue. We then check the starvation count for the PCB at the head of each fifo queue. If the starvation count of a PCB is greater than the starvation threshold, we set the boost flag for that PCB to true. If a PCB has a boost flag that is true, we run that process right away until a timer interrupt occurs. Initially, we did not run the processes with a PCB marked as boosted and just enqueued them into the next higher priority. This did not work however because these processes would get held up at the end of longer fifo queues and searching for these processes to remove them from the fifo queue after time was very slow.\
}